services:
  traefik:
    image: traefik:latest
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certificates.certFile=./certs/selfsigned.crt"
      - "--entrypoints.websecure.http.tls.certificates.keyFile=./certs/selfsigned.key"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./certs:/certs"
    networks:
      - web
    labels:
      - "traefik.http.routers.traefik.rule=PathPrefix(`/traefik`)"
      - "traefik.http.middlewares.traefik-auth.stripprefix.prefixes=/traefik"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls=true"

  auth-service:
    build:
      context: .
      dockerfile: AuthService/Dockerfile
    image:
      danyadrakon/auth-service:latest
    volumes:
      - ./shared:/app/shared
      - ./certs:/certs
    environment:
      - DB=${DB}
      - SECRET=${SECRET}
      - PORT=${PORT}
      - CERTIFICATE=${CERTIFICATE}
      - CERTIFICATEKEY=${CERTIFICATEKEY}
    labels:
      - "traefik.enable=true"  # Enable Traefik for this service
      - "traefik.http.routers.auth-service.rule=PathPrefix(`/auth`)"  # Route requests with /auth prefix
      - "traefik.http.routers.auth-service.entrypoints=websecure"  # Use HTTPS entry point
      - "traefik.http.routers.auth-service.tls=true"  # Enable TLS for this router
      - "traefik.http.middlewares.auth-service-redirect-https.redirectscheme.scheme=https"  # Redirect HTTP to HTTPS
      - "traefik.http.routers.auth-service.middlewares=auth-service-redirect-https"  # Apply HTTPS redirection middleware
      - "traefik.http.middlewares.auth-service-cors.headers.accessControlAllowOriginList=https://alumni-inno.netlify.app"  # CORS settings
      - "traefik.http.middlewares.auth-service-cors.headers.accessControlAllowMethods=GET,POST,PUT,PATCH,DELETE,OPTIONS"
      - "traefik.http.middlewares.auth-service-cors.headers.accessControlAllowHeaders=Content-Type,Authorization"
      - "traefik.http.middlewares.auth-service-cors.headers.accessControlExposeHeaders=Content-Length"
      - "traefik.http.middlewares.auth-service-cors.headers.accessControlAllowCredentials=true"
      - "traefik.http.routers.auth-service.middlewares=auth-service-cors"  # Apply CORS middleware
      - "traefik.http.services.auth-service.loadbalancer.server.port=8081"  # Service port
    networks:
      - web
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  requests-service:
    build:
      context: .
      dockerfile: AdditionalRequestService/Dockerfile
    image:
      danyadrakon/requests-service:latest
    volumes:
      - ./shared:/app/shared
    environment:
      - DB=${DB}
      - SECRET=${SECRET}
      - PORT=${PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.request-service.rule=PathPrefix(`/requests`)"
      - "traefik.http.services.request-service.loadbalancer.server.port=8082"
    networks:
      - web
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  donation-service:
    build:
      context: .
      dockerfile: DonationService/Dockerfile
    image:
      danyadrakon/donation-service:latest
    volumes:
      - ./shared:/app/shared
    environment:
      - DB=${DB}
      - SECRET=${SECRET}
      - PORT=${PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.donation-service.rule=PathPrefix(`/donation`)"
      - "traefik.http.services.donation-service.loadbalancer.server.port=8083"
    networks:
      - web
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  filtering-service:
    build:
      context: .
      dockerfile: FilteringService/Dockerfile
    image:
      danyadrakon/filtering-service:latest
    volumes:
      - ./shared:/app/shared
    environment:
      - DB=${DB}
      - SECRET=${SECRET}
      - PORT=${PORT}
    networks:
      - web
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"


  event-service:
    build:
      context: .
      dockerfile: EventService/Dockerfile
    image:
      danyadrakon/event-service:latest
    volumes:
      - ./shared:/app/shared
    environment:
      - DB=${DB}
      - SECRET=${SECRET}
      - PORT=${PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.event-service.rule=PathPrefix(`/events`)"
      - "traefik.http.services.event-service.loadbalancer.server.port=8084"
    networks:
      - web
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  project-service:
    build:
      context: .
      dockerfile: ProjectService/Dockerfile
    image:
      danyadrakon/project-service:latest
    volumes:
      - ./shared:/app/shared
    environment:
      - DB=${DB}
      - SECRET=${SECRET}
      - PORT=${PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.project-service.rule=PathPrefix(`/projects`)"
      - "traefik.http.services.project-service.loadbalancer.server.port=8085"
    networks:
      - web
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  volunteer-service:
    build:
      context: .
      dockerfile: VolunteerService/Dockerfile
    image:
      danyadrakon/volunteer-service:latest
    volumes:
      - ./shared:/app/shared
    environment:
      - DB=${DB}
      - SECRET=${SECRET}
      - PORT=${PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.volunteer-service.rule=PathPrefix(`/volunteer`)"
      - "traefik.http.services.volunteer-service.loadbalancer.server.port=8086"
    networks:
      - web
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

networks:
  web:
    external: true
